var searchIndex = new Map(JSON.parse('[["arcella",{"t":"FCNNNNCCNNCNNNCNNNNNNNCHCCCNNNNNFNNNNNNNNNOCCNOHNNNGFPPPNNNNNNNONNNNNNNNNNNNNNNNNONNONNNNNNNJJHHHHFNNNNNNNNNNNNFONNONNNONNNNNNNNNHOOONNNNPIGPPPPPPPPPPPPPPPIPPPPNNNNNNNNNNNNNNNNNNNNFFJFONNNNNNNNNNNHHOHHHNNNNNNNHHNNNOONNNNHHHNNNNNNHOOONNNNOONNNNNNNNNNFFFNNNNNNOONNNNNNNNNONNNNNNNNNNOONOOONONNNNNNNNNNOFONNOONNNNNNNONNNN","n":["Cli","alme","augment_args","augment_args_for_update","borrow","borrow_mut","cache","cli","command","command_for_update","config","deref","deref_mut","drop","error","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","log","main","manifest","runtime","storage","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","AlmeServerHandle","borrow","borrow_mut","deref","deref_mut","drop","","from","init","into","join_handle","protocol","server","shutdown","shutdown_tx","start","try_from","try_into","type_id","AlmeRequest","AlmeResponse","ListModules","Ping","Status","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","data","deref","","deref_mut","","deserialize","","drop","","error","fmt","","from","","init","","into","","message","serialize","","success","to_owned","try_from","","try_into","","type_id","","MAX_READER_TIMEOUT","MAX_REQUEST_LENGTH","handle_connection","run_server_loop","send_response","spawn_server","ModuleCache","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","try_from","try_into","type_id","ArcellaConfig","base_dir","borrow","borrow_mut","cache_dir","clone","clone_into","clone_to_uninit","config_dir","default","deref","deref_mut","deserialize","drop","fmt","from","init","into","load","log_dir","modules_dir","socket_path","to_owned","try_from","try_into","type_id","Alme","AnyResult","ArcellaError","Config","Err","","HomeDirNotFound","Instance","Internal","InvalidRequest","Io","IoWithPath","Join","Json","Manifest","ModuleNotFound","Ok","","Result","RuntimeError","Serialization","Wasmtime","Wat","borrow","borrow_mut","deref","deref_mut","drop","fmt","","from","","","","","","init","into","source","to_string","try_from","try_into","type_id","AlmeBufferLayer","EventVisitor","LOG_BUFFER","TracingConfig","alme_buffer_size","borrow","","","borrow_mut","","","clone","clone_into","clone_to_uninit","default","","default_alme_buffer_size","default_file","default_level","default_log_level","default_stderr","default_structured","deref","","","deref_mut","","","deserialize","deserialize_level_filter","deserialize_module_levels","drop","","","fields","file","fmt","from","","","get_log_buffer","get_recent_logs","init","","","","into","","","load_tracing_config","max_size","message","modules","new","on_event","record_debug","record_str","stderr","structured","to_owned","try_from","","","try_into","","","type_id","","","ArcellaRuntime","ArcellaRuntimeEnvironment","ArcellaRuntimeStatus","borrow","","","borrow_mut","","","cache","config","deref","","","deref_mut","","","drop","","","environment","from","","","init","","","into","","","new","pid","","shutdown","start_instant","start_time","start_utc","status","storage","try_from","","","try_into","","","type_id","","","uptime","","StorageManager","base_dir","borrow","borrow_mut","cache_dir","config_dir","deref","deref_mut","drop","ensure_directories","from","init","into","modules_dir","new","try_from","try_into","type_id"],"q":[[0,"arcella"],[32,"arcella::alme"],[51,"arcella::alme::protocol"],[92,"arcella::alme::server"],[98,"arcella::cache"],[111,"arcella::config"],[137,"arcella::error"],[180,"arcella::log"],[249,"arcella::runtime"],[299,"arcella::storage"],[317,"clap_builder::builder::command"],[318,"core::fmt"],[319,"clap_builder::parser::matches::arg_matches"],[320,"clap_builder"],[321,"core::result"],[322,"clap_builder::util::id"],[323,"core::option"],[324,"core::any"],[325,"tokio::sync::rwlock"],[326,"alloc::sync"],[327,"serde_core::de"],[328,"alloc::string"],[329,"serde_core::ser"],[330,"tokio::net::unix::stream"],[331,"tokio::sync::broadcast"],[332,"tokio::net::unix::listener"],[333,"tokio::io::split"],[334,"std::path"],[335,"tokio::runtime::task::error"],[336,"serde_json::error"],[337,"wat"],[338,"anyhow"],[339,"std::io::error"],[340,"core::error"],[341,"std::sync::once_lock"],[342,"tracing_core::metadata"],[343,"std::collections::hash::map"],[344,"alloc::vec"],[345,"alloc::collections::vec_deque"],[346,"std::sync::poison::mutex"],[347,"tracing_appender::non_blocking"],[348,"tracing_core::event"],[349,"tracing_subscriber::layer::context"],[350,"tracing_core::subscriber"],[351,"tracing_subscriber::registry"],[352,"tracing_core::field"],[353,"std::time"],[354,"time::offset_date_time"],[355,"core::time"]],"i":"``l000``00`000`0000000`````00000`B`000000000``00`000``Bh000Bl1011101010101001010101001001101010```````Df00000000000`Dd0000000000000000`0000000Al``0HbHd222222222210`222222222222222222222222````EfFf1Eh12022220``2```1201202``120022120```120120`1021100222120120120```GfGjBb21000210210210021021021002102120021021021001`Gd0000000000000000","f":"``{bb}0{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}``{{}b}0`{h{{d{c}}}{}}{h{{d{fc}}}{}}{hj}`{{{d{l}}{d{fn}}}A`}{cc{}}{{{d{Ab}}}{{Af{lAd}}}}{{{d{fAb}}}{{Af{lAd}}}}{{}{{Aj{Ah}}}}{{}h}{{}c{}}`{{}{{Af{jAl}}}}```{c{{Af{e}}}{}{}}{{}{{Af{c}}}{}}{dAn}{{{d{fl}}{d{Ab}}}{{Af{jAd}}}}{{{d{fl}}{d{fAb}}}{{Af{jAd}}}}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{h{{d{c}}}{}}{h{{d{fc}}}{}}{hj}{{{d{fB`}}}j}{cc{}}>={B`Aj}``{B`{{Af{jAl}}}}1{{{Bf{{Bd{Bb}}}}}{{Af{B`Al}}}}>=<`````9988{{{d{Bh}}}Bh}{{d{d{fc}}}j{}}{{dBj}j}{BlAj};;::{c{{Af{Bh}}}Bn}{c{{Af{Bl}}}Bn};;{{{d{C`}}}Bl}{{{d{Bh}}{d{fn}}}A`}{{{d{Bl}}{d{fn}}}A`}<<{{}h}0{{}c{}}0{BlCb}{{{d{Bh}}c}AfCd}{{{d{Bl}}c}AfCd}{BlCf}{dc{}}{c{{Af{e}}}{}{}}0{{}{{Af{c}}}{}}0{dAn}0{{}Ch}:{{Cj{Bf{{Bd{Bb}}}}{Cl{j}}}{{Af{jAl}}}}{{Cn{Bf{{Bd{Bb}}}}{Cl{j}}}{{Af{jAl}}}}{{{d{f{D`{Cj}}}}{d{Bl}}}{{Af{jAl}}}}{{Db{Bf{{Bd{Bb}}}}}{{Af{B`Al}}}}`{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{h{{d{c}}}{}}{h{{d{fc}}}{}}{hj}{cc{}}{{}h}{{}c{}}{{{d{{Bf{Dd}}}}}{{Af{DfAl}}}}{c{{Af{e}}}{}{}}{{}{{Af{c}}}{}}{dAn}`{DdDb}<;0{{{d{Dd}}}Dd}{{d{d{fc}}}j{}}{{dBj}j}3{{}Dd}>={c{{Af{Dd}}}Bn}={{{d{Dd}}{d{fn}}}A`}=<;{{}{{Af{DdAl}}}}777{dc{}};:9```````````````````````{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}{h{{d{c}}}{}}{h{{d{fc}}}{}}{hj}{{{d{Al}}{d{fn}}}A`}0{cc{}}{DhAl}{DjAl}{DlAl}{DnAl}{E`Al}{{}h}{{}c{}}{{{d{Al}}}{{Aj{{d{Eb}}}}}}{dCb}{c{{Af{e}}}{}{}}{{}{{Af{c}}}{}}{dAn}``{{}Ed}`{Efh}{d{{d{c}}}{}}00{{{d{f}}}{{d{fc}}}{}}00{{{d{Ef}}}Ef}{{d{d{fc}}}j{}}{{dBj}j}{{}Ef}{{}Eh}?{{}Cf}{EfEj}{{}Ej}22{h{{d{c}}}{}}00{h{{d{fc}}}{}}00{c{{Af{Ef}}}Bn}{c{{Af{Ej}}}Bn}{c{{Af{{El{CbEj}}}}}Bn}{hj}00{EhEn}{EfCf}{{{d{Ef}}{d{fn}}}A`}{cc{}}00{{}{{Aj{{d{{Bf{{Fb{{F`{Cb}}}}}}}}}}}}{h{{En{Cb}}}}{{{d{Dd}}}{{Af{{Aj{Fd}}Al}}}}{{}h}00{{}c{}}00{{{d{Db}}}{{Af{EfAl}}}}{Ffh}{EhCb}{EfEl}{hFf}{{{d{Ff}}{d{Fh}}{Fj{c}}}j{FlFn}}{{{d{fEh}}{d{G`}}{d{Gb}}}j}{{{d{fEh}}{d{G`}}{d{C`}}}j}??{dc{}}{c{{Af{e}}}{}{}}00{{}{{Af{c}}}{}}00{dAn}00```{d{{d{c}}}{}}00{{{d{f}}}{{d{fc}}}{}}00{BbBf}0{h{{d{c}}}{}}00{h{{d{fc}}}{}}00{hj}003{cc{}}00{{}h}00{{}c{}}00{{{Bf{Dd}}{Bf{Gd}}{Bf{Df}}}{{Af{BbAl}}}}{GfGh}{GjGh}{{{d{fBb}}}{{Af{jAl}}}}{GfGl}{GjGn}{GfGn}{{{d{Bb}}}{{Af{GjAl}}}}>{c{{Af{e}}}{}{}}00{{}{{Af{c}}}{}}00{dAn}00{{{d{Bb}}}H`}{GjH`}`{GdDb}{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}22{h{{d{c}}}{}}{h{{d{fc}}}{}}{hj}{{{d{Gd}}}{{Af{jAl}}}}{cc{}}{{}h}{{}c{}}9{{{d{{Bf{Dd}}}}}{{Af{GdAl}}}}?>=","D":"Hd","p":[[5,"Command",317],[1,"reference",null,null,1],[0,"mut"],[1,"usize"],[1,"unit"],[5,"Cli",0],[5,"Formatter",318],[8,"Result",318],[5,"ArgMatches",319],[8,"Error",320],[6,"Result",321,null,1],[5,"Id",322],[6,"Option",323,null,1],[6,"ArcellaError",137],[5,"TypeId",324],[5,"AlmeServerHandle",32],[5,"ArcellaRuntime",249],[5,"RwLock",325],[5,"Arc",326,null,1],[6,"AlmeRequest",51],[1,"u8"],[5,"AlmeResponse",51],[10,"Deserializer",327],[1,"str"],[5,"String",328],[10,"Serializer",329],[1,"bool"],[1,"u64"],[5,"UnixStream",330],[5,"Receiver",331],[5,"UnixListener",332],[5,"WriteHalf",333],[5,"PathBuf",334],[5,"ArcellaConfig",111],[5,"ModuleCache",98],[5,"JoinError",335],[5,"Error",336],[5,"Error",337],[5,"Error",338],[5,"Error",339],[10,"Error",340],[5,"OnceLock",341],[5,"TracingConfig",180],[5,"EventVisitor",180],[5,"LevelFilter",342],[5,"HashMap",343],[5,"Vec",344],[5,"VecDeque",345],[5,"Mutex",346],[5,"WorkerGuard",347],[5,"AlmeBufferLayer",180],[5,"Event",348],[5,"Context",349],[10,"Subscriber",350],[10,"LookupSpan",351],[5,"Field",352],[10,"Debug",318],[5,"StorageManager",299],[5,"ArcellaRuntimeEnvironment",249],[1,"u32"],[5,"ArcellaRuntimeStatus",249],[5,"Instant",353],[5,"OffsetDateTime",354],[5,"Duration",355],[8,"Result",137],[8,"AnyResult",137]],"r":[],"b":[[165,"impl-Debug-for-ArcellaError"],[166,"impl-Display-for-ArcellaError"],[168,"impl-From%3CJoinError%3E-for-ArcellaError"],[169,"impl-From%3CError%3E-for-ArcellaError"],[170,"impl-From%3CError%3E-for-ArcellaError"],[171,"impl-From%3CError%3E-for-ArcellaError"],[172,"impl-From%3CError%3E-for-ArcellaError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAPsAHgAAAAAAAgAMABAAAAASAAMAFwAQACkAAAArAAIALwAAADEAAgA2ABIASgABAE4AAQBSAAsAYwAFAGoAAABsABIAgAAAAIIABwChAAYAqQAFALAABgC4ABkA0wAGAN0AAQDgAAIA5gAoABIBAgAYAR0ANwEAADkBBAA=","P":[[4,"T"],[8,""],[11,"T"],[13,""],[16,"T"],[17,""],[21,"U"],[23,""],[27,"U,T"],[28,"U"],[29,""],[33,"T"],[37,""],[39,"T"],[40,""],[41,"U"],[42,""],[48,"U,T"],[49,"U"],[50,""],[56,"T"],[60,""],[61,"T"],[62,""],[64,"T"],[68,"__D"],[70,""],[75,"T"],[77,""],[79,"U"],[81,""],[82,"__S"],[84,""],[85,"T"],[86,"U,T"],[88,"U"],[90,""],[99,"T"],[103,""],[104,"T"],[105,""],[106,"U"],[107,""],[108,"U,T"],[109,"U"],[110,""],[113,"T"],[115,""],[117,"T"],[118,""],[121,"T"],[123,"__D"],[124,""],[126,"T"],[127,""],[128,"U"],[129,""],[133,"T"],[134,"U,T"],[135,"U"],[136,""],[160,"T"],[164,""],[167,"T"],[168,""],[174,"U"],[175,""],[177,"U,T"],[178,"U"],[179,""],[185,"T"],[191,""],[192,"T"],[193,""],[202,"T"],[208,"__D"],[209,"D"],[211,""],[217,"T"],[220,""],[226,"U"],[229,""],[234,"S"],[235,""],[239,"T"],[240,"U,T"],[243,"U"],[246,""],[252,"T"],[258,""],[260,"T"],[266,""],[270,"T"],[273,""],[276,"U"],[279,""],[288,"U,T"],[291,"U"],[294,""],[301,"T"],[303,""],[305,"T"],[307,""],[309,"T"],[310,""],[311,"U"],[312,""],[314,"U,T"],[315,"U"],[316,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[10157]}