searchState.loadedDescShard("arcella_types", 0, "ALME (Arcella Local Management Extensions) definitions.\nGeneric value types for Arcella.\nALME (Arcella Local Management Extensions) protocol …\nAn ALME request sent by a client.\nAn ALME response returned by the server.\nOptional arguments for the command.\nCommand name in hierarchical format, e.g., <code>&quot;ping&quot;</code>, …\nOptional structured data (e.g., status details, log lines, …\nCreate an error response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHuman-readable message (e.g., “pong”, “Arcella …\nCreate a successful response.\nWhether the command succeeded.\nComponent capabilities and requirements\nDescribes the intrinsic properties of a WebAssembly module.\nComponent capabilities and requirements\nShort description (optional).\nEnvironment variables needed\nTree of WIT interfaces this module <strong>exports</strong> to other …\nRequired filesystem access paths\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the canonical module identifier: <code>name@version</code>.\nTree of WIT interfaces this module <strong>imports</strong> from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHuman-readable name of the module (e.g., <code>&quot;http-logger&quot;</code>).\nRequired network access\nCPU/memory limits (for resource control)\nTrusted execution environment (TEE) requirements\nValidates that a string matches the expected WIT interface …\nValidates component name format\nValidates version format (simplified semver)\nSemantic version of the module (e.g., <code>&quot;0.1.0&quot;</code>).\nRequired WASI preview2 capabilities\nA nested WebAssembly component.\nA WebAssembly component function with named parameters and …\nAn instantiated component (e.g., a resolved instance like …\nA serializable and inspectable representation of a …\nA core WebAssembly function (not part of the Component …\nA core WebAssembly module embedded within a component.\nA resource handle (e.g., file descriptor, socket).\nA user-defined type (record, variant, enum, flags, etc.).\nA fallback for unrecognized or unrepresentable component …\nFlattens a hierarchical component item map into a flat map …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional debug information about the unrecognized item.\nExports provided by the nested component.\nThe exported items of this instance.\nImports declared by the nested component.\nList of <code>(parameter_name, type_name)</code> pairs.\nList of result type names (empty for void functions).\nA sequence of <code>Value</code>s.\nA boolean value.\nRepresents hierarchical configuration data with support …\nA 64-bit floating-point number. Uses <code>OrderedFloat</code> to …\nA signed 64-bit integer.\nA map of string keys to <code>Value</code>s. Uses <code>HashMap</code> for fast …\nAn explicit null value, representing the absence of data.\nRepresents an entry within a section of the configuration. …\nA UTF-8 string.\nThe name of a subsection.\nRepresents a specific error that occurred during data …\nA typed error value, useful for signaling errors within …\nA generic value type that can represent data from …\nA reference to a value key by its index in the <code>values</code> map.\nA string identifying the type or category of the error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a reference to the value associated with the …\nRetrieves the key-value pairs belonging to the specified …\nRetrieves the indices of value keys belonging to the …\nRetrieves the names of sub-sections belonging to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHuman-readable error message.\nCreates a new <code>ConfigData</code> instance from a flat map of …\nMap of sections (e.g., “arcella”, “arcella.log”, …\nOriginal flat map of all parameters, sorted by key.")